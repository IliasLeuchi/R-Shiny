var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1[1]
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
scatterplot(pts~ast,data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
scatterplot(pts~ast,data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
plot(pts~ast)
plot(pts~ast, data = test)
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
scatterplot(pts~ast,data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
scatterplot(pts~ast,data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
test =filter(nba,nba$season=="1996-97" & nba$team_abbreviation=="ATL")
dim(test)[1]
test[,13]
test =filter(nba,nba$season=="1996-97" & nba$team_abbreviation=="ATL")
dim(test)[1]
test[,13]
test =filter(nba,nba$season=="1996-97" & nba$team_abbreviation=="ATL")
dim(test)[1]
test[,13]
test[,14]
plot(test[,13]~test[,14])
scatterplot(test[,13]~test[,14],
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
scatterplot(pts~ast,data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
scatterplot(test[,13]~test[,14],data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
scatterplot(pts~ast,data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
scatterplot(test[,13]~test[,14],data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
scatterplot(test[,13]~test[,15],data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
theta = 0.5
alpha = 0.05
n=100
ech = mean(rbinom(n,1,theta))
b_inf= ech-qnorm(1-alpha/2)*sqrt(ech*(1-ech)/n)
b_sup= ech+qnorm(1-alpha/2)*sqrt(ech*(1-ech)/n)
IC = paste("[",round(b_inf,3),round(b_sup,3),"]")
IC
niveau = function (theta,n,alpha)  {
ech = replicate(1000,rbinom(n,1,theta))
IC = cbind(ech-qnorm(1-alpha/2)*sqrt(ech*(1-ech)/n),
ech+qnorm(1-alpha/2)*sqrt(ech*(1-ech)/n))
}
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau = function (theta,n,alpha)  {
ech = replicate(1000,rbinom(n,1,theta))
IC = cbind(ech-qnorm(1-alpha/2)*sqrt(ech*(1-ech)/n),
ech+qnorm(1-alpha/2)*sqrt(ech*(1-ech)/n))
IC
}
niveau(theta,n,alpha)
theta = 0.5
alpha = 0.05
n=100
est = mean(rbinom(n,1,theta))
b_inf= ech-qnorm(1-alpha/2)*sqrt(ech*(1-ech)/n)
b_sup= ech+qnorm(1-alpha/2)*sqrt(ech*(1-ech)/n)
niveau = function (theta,n,alpha)  {
est = replicate(1000,mean(rbinom(n,1,theta))
IC = cbind(est-qnorm(1-alpha/2)*sqrt(ech*(1-est)/n),
niveau = function (theta,n,alpha)  {
est = replicate(1000,mean(rbinom(n,1,theta)))
IC = cbind(est-qnorm(1-alpha/2)*sqrt(ech*(1-est)/n),
est+qnorm(1-alpha/2)*sqrt(ech*(1-est)/n))
}
niveau(theta,n,alpha)
niveau = function (theta,n,alpha)  {
est = replicate(1000,mean(rbinom(n,1,theta)))
IC = cbind(est-qnorm(1-alpha/2)*sqrt(ech*(1-est)/n),
est+qnorm(1-alpha/2)*sqrt(ech*(1-est)/n))
IC
}
niveau(theta,n,alpha)
niveau = function (theta,n,alpha)  {
est = replicate(1000,mean(rbinom(n,1,theta)))
IC = cbind(est-qnorm(1-alpha/2)*sqrt(ech*(1-est)/n),
est+qnorm(1-alpha/2)*sqrt(ech*(1-est)/n))
mean(IC[,1]<=theta & IC[,2]>=theta)
}
niveau(theta,n,alpha)
niveau = function (theta,n,alpha)  {
est = replicate(1000,mean(rbinom(n,1,theta)))
IC = cbind(est-qnorm(1-alpha/2)*sqrt(ech*(1-est)/n),
est+qnorm(1-alpha/2)*sqrt(ech*(1-est)/n))
mean(IC[,1]<=theta & IC[,2]>=theta)
}
niveau(theta,n,alpha)
niveau = function (theta,n,alpha)  {
est = replicate(1000,mean(rbinom(n,1,theta)))
IC = cbind(est-qnorm(1-alpha/2)*sqrt(ech*(1-est)/n),
est+qnorm(1-alpha/2)*sqrt(ech*(1-est)/n))
mean(IC[,1])<=theta & mean(IC[,2])>=theta
}
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau(theta,n,alpha)
niveau = function (theta,n,alpha)  {
est = replicate(1000,mean(rbinom(n,1,theta)))
IC = cbind(est-qnorm(1-alpha/2)*sqrt(ech*(1-est)/n),
est+qnorm(1-alpha/2)*sqrt(ech*(1-est)/n))
mean(IC[,1]<=theta & mean(IC[,2]>=theta)
}
niveau = function (theta,n,alpha)  {
est = replicate(1000,mean(rbinom(n,1,theta)))
IC = cbind(est-qnorm(1-alpha/2)*sqrt(ech*(1-est)/n),
est+qnorm(1-alpha/2)*sqrt(ech*(1-est)/n))
mean(IC[,1]<=theta & IC[,2]>=theta)
}
niveau(theta,n,alpha)
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
decathlon2
data(decathlon2)
head(decathlon2)
View(decathlon2)
decathlon2.active <- decathlon2[1 :23, 1 :10]
head(decathlon2.active[, 1 :6], 4)
res.pca <- PCA(decathlon2.active, graph = FALSE)
res.pca <- PCA(decathlon2.active, graph = FALSE)
print(res.pca)
get_eigenvalue(res.pca)
fviz_eig(res.pca) #Visualisation des valeurs propres.
get_pca_ind(res.pca)
get_pca_var(res.pca)
get_pca_ind(res.pca)
get_pca_var(res.pca)
fviz_pca_ind(res.pca)
fviz_pca_var(res.pca)
fviz_pca_ind(res.pca)
fviz_pca_var(res.pca)
par(c(1,2))
fviz_pca_ind(res.pca)
fviz_pca_var(res.pca)
fviz_pca_biplot(res.pca)
fviz_eig(res.pca,  addlabels = TRUE, ylim = c(0, 50))
) #Visualisation des valeurs propres.
fviz_eig(res.pca,  addlabels = TRUE, ylim = c(0, 50))
#Visualisation des valeurs propres.
# Coordonnées
head(var$coord)
var <- get_pca_var(res.pca)
var
# Coordonnées
head(var$coord)
# Cos2 : qualité de répresentation
head(var$cos2)
# Contributions aux composantes principales
head(var$contrib)
head(var$cos2, 4)
library("corrplot")
corrplot(var$cos2, is.corr=FALSE)
# Cos2 total des variables sur Dim.1 et Dim.2
fviz_cos2(res.pca, choice = "var", axes = 1 :2)
# Colorer en fonction du cos2 : qualité de représentation
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
# Colorer en fonction du cos2 : qualité de représentation
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # évite le chevauchement de texte )
# Colorer en fonction du cos2 : qualité de représentation
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # évite le chevauchement de texte
)
# Colorer en fonction du cos2 : qualité de représentation
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # évite le chevauchement de texte
)
# Colorer en fonction du cos2 : qualité de représentation
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,axes = c(1,4) # évite le chevauchement de texte
)
# Colorer en fonction du cos2 : qualité de représentation
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,axes = c(1,4,3) # évite le chevauchement de texte
)
# Colorer en fonction du cos2 : qualité de représentation
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # évite le chevauchement de texte
)
# Changer la transparence en fonction du cos2
fviz_pca_var(res.pca, alpha.var = "cos2")
head(var$contrib, 4)
sum(var$contrib[,1])
sum(var$contrib[,2])
sum(var$contrib[,3])
head(var$contrib, 4)
head(var$contrib)
var$contrib
corrplot(var$contrib, is.corr=FALSE)
View(decathlon2)
library(dplyr)
nba = read.csv(file.choose(), sep = ",")
nba
variable=names(nba)
variable
#names(nba)=c("ID","Playeur","Team","Age","Height","Weight","College","Country","Draft_Year","draft_Round","Draft_Number","Game_Played","Pts_Avg","Reb_Avg","Assist_Avg","Net_Rating","Oreb_Pct","Dreb_Pct","Usg_Pct", "Ts_Pct","Ast_Pct","Season")
team=levels(factor(nba$team_abbreviation))
year=levels(factor(nba$season))
year
joueur=levels(factor(nba$player_name))
#filter(nba,nba$season=="1996-97")
# table = filter(nba,nba$player_name=="A.C. Green")
# length(table$player_name)
# table$season
test =filter(nba,nba$season=="1996-97" & nba$team_abbreviation=="ATL")
dim(test)[1]
test[,13]
test[,14]
library("car")
test
names(nba)
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1[1]
scatterplot(pts~ast,data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
scatterplot(test[,13]~test[,15],data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
plot(test[,13]~test[,14])
legend("topleft",levels(data$saison),cex=.8,col=c("blue","green","red"),pch=c(3,2,1), text.font=4)
shiny::runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
install.packages("gtsummary")
library(gtsummary)
tbl_summary(nba$age)
library(gtsummary)
tbl_summary(nba$age)
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var = c(13,14,15)
var1[1]
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var = c(13,14,15)
var1[1]
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var = c(13,14,15)
var1[1]
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1 = c(13,14,15)
var1[1]
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1 = names(nba)
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1 = names(nba)
var1
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1 = names(nba)[13:15]
var1
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
scatterplot(var1[1]~var1[2],data = test,
regLine =T, grid =F,smooth = FALSE, legend = FALSE,
main ="test", boxplot= F,
col=c("red","green","red"),pch=c(3,2,1))
plot(var1[1]~var1[2], data = test)
plot(var1[1]~var1[2], data = test, xlim = c(10:20))
plot(var1[1]~var1[2], data = test, xlim = c(10,20))
plot(var1[1]~var1[2], data = test, ylim =xlim = c(10,20))
plot(var1[1]~var1[2], data = test, ylim = c(10,20), xlim = c(10,20))
plot(test$var1[1]~test$var1[2])
plot(test$var1[1]~test$var1[2]))
plot(test$var1[1]~test$var1[2])
plot(var1[1]~var1[2], data = test)
var1[1]
plot(var1[1]~var1[2], data = test)
var1[1]
plot(var1[1]~var1[2], data = test)
var1[1]
#plot(var1[1]~var1[2], data = test)
test$var1[1]
#plot(var1[1]~var1[2], data = test)
test$pts
#plot(var1[1]~var1[2], data = test)
test$var1
#plot(var1[1]~var1[2], data = test)
test$var1[1]
#plot(var1[1]~var1[2], data = test)
num=13
test[,num]
#plot(var1[1]~var1[2], data = test)
num=13
test[,num]
#plot(var1[1]~var1[2], data = test)
num=13
test[,num]
plot(test[,num]~test[,14])
num=13
test[,num]
num2=14
plot(test[,num]~test[,num2])
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1
num=var1[1]
test[,num]
num2=var1[2]
plot(test[,num]~test[,num2])
if (var1[1]=='pts') {
num = 13
}
else {
if (var1[1]=='pts') {
num = 13
}
else {
if (var1[1]=='pts') {
num = 13
}
if (var1[1]=='pts') {
num = 13
}
else {
if (var1[1]=="pts") {
num = 13
}
else {
if (var1[1]=="pts) {
num = 13
}
else {
num=14
}
if (var1[1]=="pts") {
num = 13
}
else {
if (var1[1]=="pts") {
num = 13
}
elseif (var1[1]=="pts") {
if (var1[1]=="pts") {
num <- 13
}
if (var1[1]=="ast") {
num=14
}
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
num=var1[1]
test[,num]
num2=var1[2]
plot(test[,num]~test[,num2])
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1
num=var1[1]
test[,num]
num2=var1[2]
plot(test[,num]~test[,num2])
num=var1[1]
test[,num]
num2=var1[2]
plot(test[,num]~test[,num2])
var1 =c("Points","Rebonds","Passes Décisives")
var1 =c("pts","reb","ast")
var1
num=var1[1]
test[,num]
num2=var1[2]
plot(test[,pts]~test[,ast])
num=var1[1]
test[,num]
num2=var1[2]
plot(test[pts]~test[,ast])
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
as.formula("y~x")
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
call("y")
expression("y")
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
library(dplyr)
nba = read.csv(file.choose(), sep = ",")
nba
variable=names(nba)
variable
#names(nba)=c("ID","Playeur","Team","Age","Height","Weight","College","Country","Draft_Year","draft_Round","Draft_Number","Game_Played","Pts_Avg","Reb_Avg","Assist_Avg","Net_Rating","Oreb_Pct","Dreb_Pct","Usg_Pct", "Ts_Pct","Ast_Pct","Season")
team=levels(factor(nba$team_abbreviation))
year=levels(factor(nba$season))
year
joueur=levels(factor(nba$player_name))
#filter(nba,nba$season=="1996-97")
# table = filter(nba,nba$player_name=="A.C. Green")
# length(table$player_name)
# table$season
test =filter(nba,nba$season=="1996-97" & nba$team_abbreviation=="ATL")
dim(test)
library("car")
test
key <- c("Points", "rebonds", "Passes décisives")
value <- c("pts","reb","ast")
# my_list2 <- list()
# for(i in 1:length(key)) {
#   my_list2[key[i]] <- value[i]
# }
my_list2 =setNames(value,key) #Plus Fastoche
my_list2[3]
length(my_list2)
key[length(my_list2[3])]
shiny::runApp('C:/Users/ilias/OneDrive/Bureau/LogicielSpe/R/NBAProject')
